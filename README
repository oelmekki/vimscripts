-------------
Tab alternate
-------------

Let you switch to the last seen tab, as C-a C-a in screen.

The default map is C-p. It works in normal mode as well as
insert mode.

---------------
Syntax checkers
---------------

PHPCheck, RUBYCheck, JSCheck

Launch syntax check on the current buffer. 

Code duplication is assumed, for you can choose only what you need.

There is no more default binding, use the ones you want. A possible
binding management is to assign syntax check on the same binding,
depending of file type detection :

func SyntaxCheck( lang )
  if a:lang == 'php' 
    nnoremap <C-c> :PHPCheck<CR>
    inoremap <C-c> <esc>:PHPCheck<CR>

  elseif a:lang == 'ruby'
    nnoremap <C-c> :RUBYCheck<CR>
    inoremap <C-c> <esc>:RUBYCheck<CR>

  elseif a:lang == 'js'
    nnoremap <C-c> :JSCheck<CR>
    inoremap <C-c> <esc>:JSCheck<CR>
  endif
endfunction

autocmd FileType php  call SyntaxCheck( 'php' )
autocmd FileType ruby call SyntaxCheck( 'ruby' )
autocmd FileType javascript call SyntaxCheck( 'js' )


---------
Typolight
---------

Set of functions to help while coding for Typolight.

Those functions are to be used when writing some dca file.

DCAtext       :   create a text conf field 
DCAselect     :   create a select conf field
DCAfiletree   :   create an eFileTree conf field ( from framework module )
DCArte        :   create textarea conf field with tinyMCE
DCAm2m        :   create a manyToMany conf field ( from framework module )
DCAdate       :   create a date conf field

( framework module can be found at http://github.com/oelmekki/typolight_framework/tree/master )

-----------
Third party
-----------

php_check and ruby_check depends on their language interpreter.

js_check depends on Rhino ( http://www.mozilla.org/rhino/ ) and
provide jslint.js ( http://www.jslint.com/ ).

